version: 5.7.56
session: 684af9c807e9101688883263
steps:
  - prompt: store the date for the next Sunday in format MM-DD-YYYY
    commands:
      - command: exec
        lang: shell
        output: nextSundayDate
        windows: |
          $today = Get-Date;
          $dayOfWeek = $today.DayOfWeek;

          # Calculate the number of days until the next Sunday
          $daysToAdd = 0;
          if ($dayOfWeek -ne [DayOfWeek]::Sunday) {
            # If today is not Sunday, calculate days until next Sunday
            $daysToAdd = ([int][DayOfWeek]::Sunday - [int]$dayOfWeek + 7) % 7
          } else {
            # If today is Sunday, the next Sunday is in 7 days
            $daysToAdd = 7
          };

          $nextSunday = $today.AddDays($daysToAdd);
          Write-Output $($nextSunday.ToShortDateString());
        linux: |
          today=$(date +%s)
          day_of_week=$(date +%u)  # 1 = Monday, 7 = Sunday

          # Calculate days to add until next Sunday
          if [ "$day_of_week" -ne 7 ]; then
            days_to_add=$((7 - day_of_week))
          else
            days_to_add=7
          fi

          # Calculate next Sunday's date
          next_sunday=$(date -d "+$days_to_add days" +%m/%d/%Y)
          echo "$next_sunday"
        mac: |
          today=$(date +%s)
          day_of_week=$(date +%u)  # 1 = Monday, 7 = Sunday

          # Calculate days to add until next Sunday
          if [ "$day_of_week" -ne 7 ]; then
            days_to_add=$((7 - day_of_week))
          else
            days_to_add=7
          fi

          # Calculate next Sunday's date
          next_sunday=$(date -j -v+${days_to_add}d +%m/%d/%Y)
          echo "$next_sunday"
      - command: assert
        expect: ${OUTPUT.nextSundayDate} is the following Sunday from today's date
